name: Run Selected Selenium Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:  # manual trigger

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java correctly
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Print Java version
        run: java -version

      # Set up Docker and SonarQube
      - name: Set up SonarQube using Docker
        run: |
          echo "Setting up SonarQube..."
          docker-compose -f docker-compose.yml up -d
          
      - name: Wait for SonarQube to start
        run: |
          echo "Waiting for SonarQube server to be healthy..."
          for i in {1..30}; do
            status=$(curl -s http://localhost:9000/api/system/health | jq -r .health)
            if [ "$status" = "GREEN" ]; then
              echo "SonarQube is ready."
              break
            fi
            echo "Waiting... ($i)"
            sleep 5
          done

      # Set up SonarCloud (for SonarQube analysis)
      - name: Set up SonarCloud
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          entryPoint: "sonar-scanner"

      - name: Run Selected Selenium Tests in headless mode
        env:
          JAVA_HOME: /opt/hostedtoolcache/jdk/17/ # Ensure JAVA_HOME points to Java 17 path
        run: |
          set -e
          echo "Running tests headlessly"
          CHROME_ARGS="--headless=new --no-sandbox --disable-dev-shm-usage --window-size=1920,1080"
          mvn clean test -Dtest=essential.AddDepartment
          
          echo "================ PARSING RESULTS ================="
          summary_line=$(grep "Tests run:" selenium-test-output.txt | tail -1)
          echo "Test Summary: $summary_line"
          total=$(echo "$summary_line" | grep -oP 'Tests run: \K[0-9]+')
          failures=$(echo "$summary_line" | grep -oP 'Failures: \K[0-9]+')
          errors=$(echo "$summary_line" | grep -oP 'Errors: \K[0-9]+')
          skipped=$(echo "$summary_line" | grep -oP 'Skipped: \K[0-9]+')
          passed=$((total - failures - errors))

          if [ "$total" -eq 0 ]; then
            percent=0
          else
            percent=$((passed * 100 / total))
          fi

          echo "========== VALIDATION SUMMARY ==========" > test-report.txt
          echo "📊 Total: $total, Passed: $passed, Failures: $failures, Errors: $errors, Skipped: $skipped, Passed %: $percent" >> test-report.txt

          if [ "$percent" -ge 80 ]; then
            echo "✅ Test pass percentage ($percent%) is acceptable. Proceeding." >> test-report.txt
            echo "pass" > test-status.txt
          else
            echo "❌ Test pass percentage ($percent%) is below threshold (80%)." >> test-report.txt
            echo "fail" > test-status.txt
          fi

          echo "" >> test-report.txt
          echo "========== TEST EXECUTION SUMMARY ==========" >> test-report.txt
          tail -n 20 selenium-test-output.txt >> test-report.txt

      # Run SonarQube Analysis after Tests
      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=hrconnecter-cicd \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=$SONAR_TOKEN

      - name: 📦 Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: test-report.txt
