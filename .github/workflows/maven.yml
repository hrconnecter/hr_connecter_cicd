name: Maven Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build Stage
  build:
    name: Build Project with Maven
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the project using Maven
      - name: Build with Maven
        run: mvn clean install

  # Test Stage
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build  # This ensures that the tests run only after the build job has completed

    steps:
      # Step 1: Checkout the repository (again, if needed)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Run Maven Tests
      - name: Run Maven Tests
        run: mvn test

      # Step 4: Run Selected Selenium Tests in headless mode
      - name: Run Selected Selenium Tests in headless mode
        env:
          JAVA_HOME: /opt/hostedtoolcache/jdk/17/  # Ensure JAVA_HOME points to Java 17 path
        run: |
          set -e
          echo "Running tests headlessly"
          CHROME_ARGS="--headless --no-sandbox --disable-dev-shm-usage --window-size=1920x1080"
          mvn clean test -Dtest=essential.AddDepartment
          
          echo "================ PARSING RESULTS ================="
          summary_line=$(grep "Tests run:" selenium-test-output.txt | tail -1)
          echo "Test Summary: $summary_line"
          total=$(echo "$summary_line" | grep -oP 'Tests run: \K[0-9]+')
          failures=$(echo "$summary_line" | grep -oP 'Failures: \K[0-9]+')
          errors=$(echo "$summary_line" | grep -oP 'Errors: \K[0-9]+')
          skipped=$(echo "$summary_line" | grep -oP 'Skipped: \K[0-9]+')
          passed=$((total - failures - errors))

          if [ "$total" -eq 0 ]; then
            percent=0
          else
            percent=$((passed * 100 / total))
          fi

          echo "========== VALIDATION SUMMARY ==========" > test-report.txt
          echo "📊 Total: $total, Passed: $passed, Failures: $failures, Errors: $errors, Skipped: $skipped, Passed %: $percent" >> test-report.txt

          if [ "$percent" -ge 80 ]; then
            echo "✅ Test pass percentage ($percent%) is acceptable. Proceeding." >> test-report.txt
            echo "pass" > test-status.txt
          else
            echo "❌ Test pass percentage ($percent%) is below threshold (80%)." >> test-report.txt
            echo "fail" > test-status.txt
          fi

          echo "" >> test-report.txt
          echo "========== TEST EXECUTION SUMMARY ==========" >> test-report.txt
          tail -n 20 selenium-test-output.txt >> test-report.txt

      # Upload test report as an artifact
      - name: 📦 Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: test-report.txt
